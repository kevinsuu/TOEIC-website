{"version":3,"sources":["components/Quiz.js","components/Home.js","App.js","index.js"],"names":["Alert","React","forwardRef","props","ref","_jsx","MuiAlert","elevation","variant","Quiz","type","useParams","words","setWords","useState","currentWord","setCurrentWord","options","setOptions","index","setIndex","score","setScore","showResults","setShowResults","selectedWords","setSelectedWords","results","setResults","numQuestions","setNumQuestions","quizStarted","setQuizStarted","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","navigate","useNavigate","useEffect","fetch","then","response","json","data","getRandomOptions","useCallback","correctWord","numOptions","incorrectOptions","length","randomWord","Math","floor","random","option","English","Chinese","includes","push","generateQuestion","idx","word","correctAnswer","incorrectAnswers","allOptions","shuffle","randomWords","slice","array","i","j","handleNumQuestionsChange","e","value","parseInt","target","startQuiz","goHome","handleCloseSnackbar","children","_jsxs","Box","_Fragment","Typography","gutterBottom","map","result","mb","question","color","isCorrect","selectedAnswer","mt","Button","onClick","reStartQuiz","style","marginRight","display","flexDirection","answer","checkAnswer","margin","textTransform","Snackbar","open","autoHideDuration","onClose","severity","alignItems","minHeight","TextField","label","onChange","height","Home","handleNavigate","concat","justifyContent","marginBottom","width","App","Router","Container","Routes","Route","path","element","container","document","getElementById","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.2236686c.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { Button, Typography, Box, TextField, Snackbar } from \"@mui/material\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst Quiz = () => {\r\n  const { type } = useParams();\r\n  const [words, setWords] = useState([]);\r\n  const [currentWord, setCurrentWord] = useState({});\r\n  const [options, setOptions] = useState([]);\r\n  const [index, setIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [selectedWords, setSelectedWords] = useState([]);\r\n  const [results, setResults] = useState([]);\r\n  const [numQuestions, setNumQuestions] = useState(10);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetch(\"/vocabulary.json\")\r\n      .then((response) => response.json())\r\n      .then((data) => setWords(data));\r\n  }, []);\r\n\r\n  const getRandomOptions = useCallback(\r\n    (words, correctWord, numOptions) => {\r\n      const incorrectOptions = [];\r\n      while (incorrectOptions.length < numOptions) {\r\n        const randomWord = words[Math.floor(Math.random() * words.length)];\r\n        const option = type === \"cn-to-en\" ? randomWord.English : randomWord.Chinese;\r\n        if (option !== (type === \"cn-to-en\" ? correctWord.English : correctWord.Chinese) && !incorrectOptions.includes(option)) {\r\n          incorrectOptions.push(option);\r\n        }\r\n      }\r\n      return incorrectOptions;\r\n    },\r\n    [type]\r\n  );\r\n\r\n  const generateQuestion = useCallback(\r\n    (words, idx) => {\r\n      const word = words[idx];\r\n      const correctAnswer = type === \"cn-to-en\" ? word.English : word.Chinese;\r\n      const incorrectAnswers = getRandomOptions(words, word, 3);\r\n      const allOptions = shuffle([correctAnswer, ...incorrectAnswers]);\r\n      setCurrentWord(word);\r\n      setOptions(allOptions);\r\n    },\r\n    [type, getRandomOptions]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (quizStarted && words.length > 0) {\r\n      const randomWords = shuffle(words).slice(0, numQuestions);\r\n      setSelectedWords(randomWords);\r\n      generateQuestion(randomWords, 0);\r\n    }\r\n  }, [quizStarted, words, numQuestions, generateQuestion]);\r\n\r\n  useEffect(() => {\r\n    if (selectedWords.length > 0) {\r\n      generateQuestion(selectedWords, index);\r\n    }\r\n  }, [index, selectedWords, generateQuestion]);\r\n\r\n  const shuffle = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n\r\n  const checkAnswer = (answer) => {\r\n    const correctAnswer = type === \"cn-to-en\" ? currentWord.English : currentWord.Chinese;\r\n    const result = {\r\n      question: currentWord,\r\n      correctAnswer,\r\n      selectedAnswer: answer,\r\n      isCorrect: answer === correctAnswer,\r\n    };\r\n    setResults([...results, result]);\r\n\r\n    if (answer === correctAnswer) {\r\n      setScore(score + 1);\r\n    }\r\n\r\n    if (index < numQuestions - 1) {\r\n      setIndex(index + 1);\r\n    } else {\r\n      setShowResults(true);\r\n    }\r\n  };\r\n\r\n  const handleNumQuestionsChange = (e) => {\r\n    const value = parseInt(e.target.value, 10);\r\n    if (value > 100) {\r\n      setSnackbarMessage(\"題數最大100題\");\r\n      setSnackbarOpen(true);\r\n      setNumQuestions(100);\r\n    } else if (value < 1) {\r\n      setSnackbarMessage(\"題數最小為1題\");\r\n      setSnackbarOpen(true);\r\n      setNumQuestions(1);\r\n    } else {\r\n      setNumQuestions(value);\r\n    }\r\n  };\r\n\r\n  const startQuiz = () => {\r\n    if (numQuestions > 100) {\r\n      setSnackbarMessage(\"題數最大100題\");\r\n      setSnackbarOpen(true);\r\n    } else if (numQuestions < 1) {\r\n      setSnackbarMessage(\"題數最小為1題\");\r\n      setSnackbarOpen(true);\r\n    } else {\r\n      setQuizStarted(true);\r\n    }\r\n  };\r\n\r\n  const reStartQuiz = () => {\r\n    setQuizStarted(false);\r\n    setIndex(0);\r\n    setScore(0);\r\n    setShowResults(false);\r\n    setSelectedWords([]);\r\n    setResults([]);\r\n  };\r\n\r\n  const goHome = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  if (!quizStarted) {\r\n    return (\r\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" minHeight=\"100vh\">\r\n        <Typography variant=\"h2\" gutterBottom>\r\n          開始 {type === \"cn-to-en\" ? \"中翻英\" : \"英翻中\"} 測驗\r\n        </Typography>\r\n        <Box display=\"flex\" alignItems=\"center\" mt={2}>\r\n          <TextField\r\n            label=\"輸入題數\"\r\n            type=\"number\"\r\n            value={numQuestions}\r\n            onChange={handleNumQuestionsChange}\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            style={{ marginRight: \"8px\" }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={startQuiz}\r\n            style={{ height: \"56px\" }} // match the TextField height\r\n          >\r\n            開始測驗\r\n          </Button>\r\n        </Box>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={goHome}>\r\n          回到首頁\r\n        </Button>\r\n        <Snackbar open={snackbarOpen} autoHideDuration={3000} onClose={handleCloseSnackbar}>\r\n          <Alert onClose={handleCloseSnackbar} severity=\"error\">\r\n            {snackbarMessage}\r\n          </Alert>\r\n        </Snackbar>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (selectedWords.length === 0) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <Box>\r\n      {!showResults ? (\r\n        <>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            {type === \"cn-to-en\" ? \"中翻英\" : \"英翻中\"} 測驗\r\n          </Typography>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            {type === \"cn-to-en\" ? currentWord.Chinese : currentWord.English}\r\n          </Typography>\r\n          <Typography variant=\"body1\" gutterBottom>\r\n            {index + 1} / {numQuestions}\r\n          </Typography>\r\n          <Box display=\"flex\" flexDirection=\"column\">\r\n            {options.map((option, idx) => (\r\n              <Button\r\n                key={idx}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => checkAnswer(option)}\r\n                style={{ margin: \"5px 0\", textTransform: \"none\" }}\r\n              >\r\n                {option}\r\n              </Button>\r\n            ))}\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            測驗結束！您的得分是 {score} / {numQuestions}\r\n          </Typography>\r\n          {results.map((result, idx) => (\r\n            <Box key={idx} mb={2}>\r\n              <Typography variant=\"h6\">\r\n                問題 {idx + 1}: {type === \"cn-to-en\" ? result.question.Chinese : result.question.English}\r\n              </Typography>\r\n              <Typography variant=\"body1\">正確答案: {result.correctAnswer}</Typography>\r\n              <Typography variant=\"body1\" color={result.isCorrect ? \"green\" : \"red\"}>\r\n                您的答案: {result.selectedAnswer}\r\n              </Typography>\r\n            </Box>\r\n          ))}\r\n          <Box mt={4}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={reStartQuiz} style={{ marginRight: \"10px\" }}>\r\n              重新測驗\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={goHome}>\r\n              回到首頁\r\n            </Button>\r\n          </Box>\r\n        </>\r\n      )}\r\n      <Snackbar open={snackbarOpen} autoHideDuration={3000} onClose={handleCloseSnackbar}>\r\n        <Alert onClose={handleCloseSnackbar} severity=\"error\">\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import React from \"react\";\r\nimport { Button, Box, Typography } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleNavigate = (type) => {\r\n    navigate(`/quiz/${type}`);\r\n  };\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" height=\"100vh\">\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        多益3000單字測驗\r\n      </Typography>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={() => handleNavigate(\"cn-to-en\")} style={{ marginBottom: \"10px\", width: \"200px\" }}>\r\n        中文翻英文\r\n      </Button>\r\n      <Button variant=\"contained\" color=\"secondary\" onClick={() => handleNavigate(\"en-to-cn\")} style={{ marginBottom: \"10px\", width: \"200px\" }}>\r\n        英文翻中文\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport { Container } from \"@mui/material\";\nimport Quiz from \"./components/Quiz\";\nimport Home from \"./components/Home\"; // 引入 Home 組件\n\nfunction App() {\n  return (\n    <Router>\n      <Container>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/quiz/:type\" element={<Quiz />} />\n        </Routes>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst container = document.getElementById(\"root\");\nconst root = ReactDOM.createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}